\documentclass[11pt]{amsart}
\usepackage{a4wide}
\usepackage{paralist}
\usepackage[colorlinks,pdftex]{hyperref}
\hypersetup{
urlcolor=blue, % color of external links
}
\usepackage{nopageno}
\usepackage{bbm}
\usepackage{dsfont}
\usepackage[normalem]{ulem}
\usepackage{multicol}
\usepackage{color}
\usepackage{cancel}
\providecommand{\floor}[1]{\left \lfloor #1 \right \rfloor }
\newcommand{\cA}{\mathcal{A}}
\newcommand{\cS}{\mathcal{S}}
\newcommand{\R}{\mathbbm{R}}
\newcommand{\Z}{\mathbbm{Z}}
\newcommand{\VV}{\mathcal{V}}
\DeclareMathOperator{\conv}{conv}
\DeclareMathOperator{\cols}{cols}
\DeclareMathOperator{\Sl}{Sl}
\DeclareMathOperator{\igc}{igc}
\DeclareMathOperator{\Gale}{Gale}
\newcommand{\ojo}[1]{\textbf{\sffamily\boldmath{[#1]}}}
\newcommand{\defn}[1]{\textbf{\color{blue}#1}} %for highlighting defined terms in text
\newtheorem*{problemG}{Problem G}
\newtheorem*{problemG*}{Problem G$^\star$}
\newtheorem*{Enproblem}{Enumerative problem in $\mathds{Z}$ }
\begin{document}
\begin{center}
\textbf{\sffamily{Discrete and Algorithmic Geometry} \\ \hrulefill }
\medskip

Elisabet Burjons \\
Irene de Parada 
\end{center}
\bigskip
\begin{center}
\textbf{\sffamily Sheet 4}
\bigskip
Report for Tuesday, December 16, 2014
\end{center}
\bigskip
\bigskip
The \defn{integral Gale complexity} of a polytope $P\subset\R^d$ with $n$~vertices is
\[
\igc(P)
\ = \
\min\{\|G\|_\infty : G \subset\Z^e \text{ is a Gale diagram of } P\},
\]
where $e=n-d-1$, $\|\mathcal A\|_\infty = \max\{\|v\|_\infty : v\in\mathcal A\}$ and $\|v\|_\infty = \max\{|v_i|\}$ for $v=(v_1,\dots,v_e)$.
While the existence of nonrational polytopes shows that $\igc(P)=\infty$ is possible (since $\min\emptyset=\infty$), here we are concerned with the following problem:
\begin{problemG}
For $e\in\Z_{\ge0}$ and $n, m\in\Z_{>0}$, determine
\[
q(e,n,m)
\ = \
\#\left\{
\begin{matrix}
G\subset\Z^e : G \text{ is a Gale diagram of a polytope } \\
\phantom{G\subset\Z^e}\!\!\text{with $n$ vertices and } \igc(G)=m
\end{matrix}
\right\} \bigg/ \text{combinatorial equivalence}.
\]
\end{problemG}
\noindent For example, $q(0,n,0) = 1$ and $q(1,n,m)=q(1,n,1)$ for all $m,n\ge1$. In more down-to-earth terms, we want to solve the following problem:
\begin{problemG*}
Enumerate, up to combinatorial equivalence, all balanced configurations~$\VV$ of $n$~vectors in~$\Z^e$ whose coordinates are all at most~$m$ in absolute value, such that
\begin{enumerate}[\qquad\upshape(1)]
\item the maximum $m$ is achieved by some $v\in\VV$,
\item and such that no hyperplane spanned by $e-1$~of the vectors strictly separates exactly one vector from the others.
\end{enumerate}
\end{problemG*}
For this, recall
that a vector configuration $\VV = (v_1,\dots,v_n)$ is \defn{balanced} if $\sum_i v_i=0$;
that no hyperplane defined by $e-1$~elements of~$\VV$ separates exactly one vector from the others iff the Gale dual of~$\VV$ is in convex position;
and that two vector configurations are \defn{combinatorially equivalent} if they define the same oriented matroid.
\bigskip
Your job is to write a function in the \texttt{polymake} framework that calculates $q(e,n,m)$. Some considerations to keep in mind:
\begin{itemize}
\item Correctness is more important than efficiency, but efficiency is supremely important.
\item Your code should be correct in all dimensions: no cutting corners by assuming $e=2$!
\item Your code should be able to calculate at least $q(2,5,2)$, $q(2,6,2)$ and $q(3,6,1)$.
\end{itemize}
You will need to think carefully about several independent aspects:
\bigskip

\begin{enumerate}
\item How do you iterate over all vector configurations?

Given $n,e,m$, because the Gale diagram has to be balanced, it has to be balanced for every component; that is, the sum of the $i$-th coordinate of all the $n$ points must add up to zero. So we can reduce the problem from $e$ dimensions to just one. Later we will se how to use the solution of this one-dimensional problem to solve the enumeration in $e$ dimensions avoiding symmetries.

\begin{Enproblem}
Enumarate all sets of $n$ points $x_1,\ldots,x_n$ in $\mathds{Z}$ with $|x_i|\leq m \ \forall i\in\{1,\ldots,n\}$ such that they add up to zero.
\end{Enproblem}

The idea is to divide the $n$ points into $X^- =\{x_i \leq 0 \ :  1 \leq i \leq n\}$ and $X^+ =\{x_i \geq 0 \ :  1 \leq i \leq n\}$
so that $|X^-| + |X^+| - \#\{x_i = 0 \ :  1 \leq i \leq n\} = n$. Then $\sum_{x_i\in X^-} x_i + \sum_{x_i\in X^+} x_i = 0$ so,

$$\sum_{x_i\in X^-} |x_i| = \sum_{x_i\in X^+} |x_i| = k$$

and $k \in\{0,\ldots,\floor{\frac{n}{2}} m\}$.

So what we have to do is to find sets of $g$ elements $y_1,\ldots,y_g$, $0\leq y_i \leq m$ and $g \in\{1,\ldots,n-1\}$, adding up to $k$. These sets with same sum $k$ be paired so that $g^- + g^+ = n$ (we can consider the same set twice). One set then will be assigned to $X^-$ and the other to $X^+$ (we have to add all zero element to both sets to agree with the definition above, but it is just a technical detail). 

To construct these sets we propose the following algorithm:
(need to write it more precisely).

 Basically, take the set with $k-1,j$ and for each element in it we define $S_{k,j}$ by: first, adding one unit (if possible, if it is not $>m$) to the fist number; if the difference between the $l-1$-th number and the  $l$-th is no greater than one then we add one unit to the $l$-th number (if possible: if it is neither $>m$ nor greater that the $l$-th number in $S_{k-1,j}$. 

Because we want sets we always mantain the descending order.

Example: $n=5, \ m=3$
\begin{eqnarray*}
k = 0 & &\\
& & S_{0,1}=\{0\}\\
& & S_{0,2}=\{00\}\\
& & S_{0,3}=\{000\}\\
& & S_{0,4}=\{0000\}\\
k = 1 & &\\
& & S_{1,1}=\{1\}\\
& & S_{1,2}=\{10\}\\
& & S_{1,3}=\{100\}\\
& & S_{1,4}=\{1000\}\\
k = 2 & &\\
& & S_{2,1}=\{2\}\\
& & S_{2,2}=\{20,11\}\\
& & S_{2,3}=\{200,110\}\\
& & S_{2,4}=\{2000,1100\}\\
\end{eqnarray*}
\begin{eqnarray*}
k = 3 & &\\
& & S_{3,1}=\{3\}\\
& & S_{3,2}=\{30,21\}\\
& & S_{3,3}=\{300,210,111\}\\
& & S_{3,4}=\{3000,2100,1110\}\\
k = 4 & &\\
& & S_{4,1}=\{\}\\
& & S_{4,2}=\{31,22\}\\
& & S_{4,3}=\{310,220,211,\cancel{211}\}\\
& & S_{4,4}=\{3100,2200,2110,\cancel{2111},1111\}\\
k = 5 & &\\
& & S_{5,1}=\{\}\\
& & S_{5,2}=\{32\}\\
& & S_{5,3}=\{320,221,311,\cancel{221}\}\\
& & S_{5,4}=\{3200,3110,2210,2111\}\\
k = 6 & &\\
& & S_{6,1}=\{\}\\
& & S_{6,2}=\{33\}\\
& & S_{6,3}=\{330,321,222\}\\
& & S_{6,4}=\{3300,3210,2220,2211,\cancel{2211}\}\\
\end{eqnarray*}

(To do: check why repeated elements happen and try to avoid it.)
\medskip

Once we have all sets $S_{k,g}$ we consider the set of all pairs, $OPn$, of positive integers adding up to $n$. In the example before: $OPn=\{41,32\}$. These pairs are $\{g^-g^+\}$. Then we define $PA$ as the set:

$$PA=\{{x_i,x_j} : x_i\in S_{k,n_1}, x_j \in S_{k,n_2}, \{n_1n_2\}\in OPn, k \in\{0,\ldots,\floor{\frac{n}{2}} m\}\}$$

We don't consider the sets $\{x_i,x_j\}$ as ordered tuples because the switch will lead to a symmetric configuration, and we want to get rid of reflections as soon as possible in the algorithm.

Now we have solved the problem in one dimension. In $e$ dimensions, we just have to compute all combinations (with repetitions) of the elements of $PA$ taken $e$ at a time and asign   elements to the $e$ components. Then in each component we define $X^-$ and $X^+$. We took the combinations and not the variations because be are able to permute the $n$ points without moving to a different Gale diagram equivalence class.

\medskip

\item Once you have generated a new configuration, how do you test whether you have already seen a combinatorially isomorphic copy?

Once a vector configuration has been generated (up to symetries to avoid trouble with ``repeated`` configurations), different tests will be conducted to classify the polytope and avoid doing expensive checkings such as compare the facet lattice unless they are unavoidable. So we will focus on two facts. Two polytopes with different number of facets are not combinatorially equivalent. And, two polytopes whose facets do not contain the same number of vertices are not equivalent. So, the proceadure will be as follows:

Given an $n,e,m$ Gale diagram:
\begin{itemize}
 \item {\em Maybe}: Check for all the $e-1$ hyperplane subsets whether the rest of the vectors but one lie on the same side. If they do, the set of points defining the polygon is not convex so we ''throw away`` the configuration. (The maybe is because perhaps this test must be part of the previous part of the exercise, so that this type of configurations are not even considered) %lo crees así Irene? quiza mientras estamos generando la configuracion podemos de algun modo evitar generar este tipo de configuraciones, si no se puede evitar dara igual comprobar antes que despues
 \item Make gaussian elimination in order to have the last $e$ vectors equal $-Id_{e}$.
 \item {\em Maybe}: Check that the all zero vector is not a row of the resulting matrix. (if this happens the all zero vectors would be a vertex of the polytope but this vector is not defined in the $d$-dimensional projective space).%tengo que mirar si esto puede pasar, parece the la configuracion de gale deberia ser muy particular para que pasara pero no estoy segura que lo estemos prohibiendo antes asi que lo añado aqui
 \item Transpose the remaining $n-e=d+1$ vectors and add to the resulting matrix (composed of $e$ vectors of size $d+1$) an identity of size $d+1$ in order to have the vertex lattice of the polygon.
 \item Consider all the ($d-1$-dimensional) hyperplanes spanned by this vertices. The ones that leave the rest of the vectors one same side are the facets of the polygon.
 \begin{itemize}
  \item In order to avoid checking twice the same hyperplane, when an extra vector lies in the hiperplane we must somehow store this info and not repeat the query with any other set of vectors that span the same hyperplane.
  \item In a set keep track of the number of facets each polygon has.
  
  (\verb+Set <int,Set> NUM_FACETS+)
  \item The elements of the set NUM\_FACETS will the integer storing number of facets $f$ and a set of facet lattices each of which contains facet lattices polygons whose facets coincide in its number of vertices. 
  
  (\verb+Set <vector<int> (f),Set>  FACET_SIZES_NUM + for each number of facets $f$) 
 \end{itemize}
 \item If there is no polygon with the same number of facets store the polygon facet lattice in a new set tagged with its facet sizes
 \item Else check for a set of polygons with the same facet sizes,
  \begin{itemize}
   \item if it does not exist create it (inside the NUM\_FACETS set)
   \item else check each facet lattice inside the set for coincidence and insert the new polygon if it is in fact new.
  \end{itemize}
\end{itemize}


\end{enumerate}

\end{document}
